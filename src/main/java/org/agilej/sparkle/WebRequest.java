package org.agilej.sparkle;

import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * interface for presenting a web request
 */
public interface WebRequest {
    
    public static final String REQ_ATTR_FOR_PATH_VARIABLES = "REQ_ATTR_FOR_PATH_VARIABLES";

    /**
     *
     * raw request
     * @param <T>
     * @return the raw request object provided by runtime container, such as a servlet request or netty request
     */
    <T> T getOriginalRequest();

    /**
     *
     * raw response
     *
     * @param <T>
     * @return the raw response object provided by runtime container, such as a servlet response or netty response
     */
    <T> T getOriginalResponse();

    /**
     * get associated WebResponse for this request
     * @return
     */
    WebResponse getWebResponse();


    /**
     * get param value for given key, if the given key has a String[] value, the first value will be returned
     *
     * @param key
     * @return
     */
    String getParameter(String key);

    /**
     * get param value for given key, if the given key has a String[] value, the first value will be returned
     * @param key
     * @return
     */
    default String params(String key){
        return getParameter(key);
    }

    /**
     * get header value for given key
     * @param key
     * @return
     */
    String getHeader(String key);

    /**
     * get http method for this request
     *
     * @return
     */
    String getMethod();

    /**
     * get path from request, without the 'context' path, 
     * for example, under a servlet container. 
     * @return
     */
    String getPath();

    /**
     *
     * get param values for given key
     *
     * @param paramName
     * @return
     */
    String[] getParameterValues(String paramName);

    /**
     * get context path from request, for servlet container it's the servlet context path
     * @return
     */
    String getContextPath();
    
    /**
     * get request body as string, especially for post
     */
    String getBody();

    /**
     * alias method for {@link #getBody()}
     * @see #getBody()
     */
    default String body(){
        return getBody();
    }

    /**
     * get attribute from request with given attribute name
     * @param attributeName
     * @param <T>
     * @return
     */
    <T> T getAttribute(String attributeName);

    /**
     * alias method for {@link #getAttribute(String)}
     *
     * @see #getAttribute(String)
     */
    default <T> T attr(String attributeName){
        return getAttribute(attributeName);
    }

    /**
     * set attribute to request
     * @param name
     * @param value
     */
    void setAttribute(String name, Object value);

    /**
     * alias method for {@link #setAttribute(String, Object)}
     *
     * @see #setAttribute(String, Object)
     */
    default void attr(String name, Object value){
        setAttribute(name, value);
    }

    List<Multipart> getMultiparts();

    /**
     * notify this request will be processed asynchronously
     */
    void startAsync();

    /**
     * whether this request is being processing asynchronously
     * @return
     */
    boolean isAsync();

    /**
     * complete async process
     */
    void completeAsync();

    /**
     * return path variable value for the given name according to the route definition.
     * @param name
     * @return
     */
    default String pathVariable(String name){
        Map<String, String> map = getAttribute(WebRequest.REQ_ATTR_FOR_PATH_VARIABLES);
        return map.get(name);
    }

    /**
     * cookies in this request
     *
     * @return all cookies
     */
    default Cookie[] cookies(){
        return new Cookie[]{};
    }

    /**
     * get cookie with given name
     * @param name
     * @return
     */
    default Cookie cookie(String name){
        Cookie[] cookies = this.cookies();
        for (Cookie cookie : cookies){
            if (cookie.name().equals(name)){
                return cookie;
            }
        }
        return null;
    }

    /**
     * a session bind to this request
     * @return
     */
    default Session session(){return null;}

    /**
     * set session data with name and value
     * @param name the uniq name in session for value
     * @param value value to store in session
     */
    default void setSession(String name, Object value){
        this.session().set(name, value);
    }

    /**
     * get data from session with given name
     * @param name name for value in session
     * @return value in session, null if not exist
     */
    default <T> T getSession(String name){
        return (T)this.session().get(name);
    }

    /**
     *
     * session's id
     *
     * @return session id
     */
    //TODO maybe should generate session id, but how to deal session id generated by servlet?
    default String getSessionId(){
        throw new RuntimeException("not implemented yet");
    }

    /**
     * resolve current request's locale by using {@link org.agilej.sparkle.core.request.LocaleResolver}.
     * The default is {@link org.agilej.sparkle.core.request.AcceptHeaderLocaleResolver}
     * <br />
     * Note if you directly use Servlet API to get locale you may be get different result if the
     * LocaleResolver is not configured to AcceptHeaderLocaleResolver.
     * @return
     */
    default Locale locale() {
        throw new RuntimeException("not implemented yet");
    }

    default String host() {
        throw new RuntimeException("not implemented yet");
    }

    default int ip() {
        throw new RuntimeException("not implemented yet");
    }

    default String scheme() {
        throw new RuntimeException("not implemented yet");
    }

    default String userAgent() {
        return getHeader("User-Agent");
    }

}
